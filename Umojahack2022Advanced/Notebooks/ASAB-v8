{"cells":[{"cell_type":"code","execution_count":2,"metadata":{"executionInfo":{"elapsed":837,"status":"ok","timestamp":1647791879912,"user":{"displayName":"zindi ai_contest","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"02141964743732724215"},"user_tz":-60},"id":"HDAJbnMavLaf"},"outputs":[],"source":["import os\n","os.chdir(\"/content/drive/MyDrive/Zindi Competitions/Umojahack2022Advanced\")"]},{"cell_type":"markdown","metadata":{"id":"0rk2Rfftvo_f"},"source":["# UmojaHack Africa 2022: African Snake Antivenom Binding Challenge Starter Notebook üêç üß¨\n","\n","\n","\n","\n","The challenge dataset stems from a high-density peptide microarray experiment that aimed to address how cross-reactive 8 different commercially available snake antivenoms are and where in the toxin sequence the antibodies they contain bind the toxin (epitope).\n","\n","\n","You will need to predict the signal column generated by a given Toxin_Kmer and Antivenom. You can use any other column available in the test set to enhance your predictions or enrich your data. We also facilitate the protein prot_bert embeddings for each row\n","\n","Any questions feel free to reach the authors.\n","\n","Authors :  M Jedidi (meds.jedidi@instadeep.com) and Nicolas Lopez Carranza (n.lopezcarranza@instadeep.com)\n","\n","The dataset has been provided by Tim Jenkins - DTU Bionengineering (tpaje@dtu.dk)"]},{"cell_type":"markdown","metadata":{"id":"GTlPbRV_wM7S"},"source":["## Libraries"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"byS_YCa1wFIm"},"outputs":[{"name":"stdout","output_type":"stream","text":["\u001b[K     |‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 750.6 MB 11 kB/s \n","\u001b[K     |‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 462 kB 46.4 MB/s \n","\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n","torchvision 0.11.1+cu111 requires torch==1.10.0, but you have torch 1.11.0 which is incompatible.\n","torchtext 0.11.0 requires torch==1.10.0, but you have torch 1.11.0 which is incompatible.\n","torchaudio 0.10.0+cu111 requires torch==1.10.0, but you have torch 1.11.0 which is incompatible.\u001b[0m\n","\u001b[?25h"]}],"source":["!pip install -qU tensorboard numpy pandas torch sklearn tensorflow"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"wDDVnxOhvme4"},"outputs":[],"source":["%load_ext tensorboard"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"945LhOsZv3_a"},"outputs":[],"source":["import random\n","\n","import numpy as np \n","import pandas as pd\n","import torch\n","from sklearn.model_selection import train_test_split\n","from torch import nn \n","from torch.utils.data import DataLoader, Dataset\n","from torch.utils.tensorboard import SummaryWriter\n","from tqdm import tqdm\n","\n","import collections\n","from itertools import combinations, product"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"oJYG0SYsre3b"},"outputs":[],"source":["torch.manual_seed(125)\n","random.seed(15546)\n","np.random.seed(166)"]},{"cell_type":"markdown","metadata":{"id":"SS6_0MndwPK0"},"source":["## Read data"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"152SIgnTwRLq"},"outputs":[],"source":["train_df = pd.read_csv(\"https://storage.googleapis.com/umojahack2022/train.csv\")\n","test_df = pd.read_csv(\"https://storage.googleapis.com/umojahack2022/test.csv\")"]},{"cell_type":"markdown","metadata":{"id":"oIvLqusdwZ9c"},"source":["## Basic EDA"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"tbFUWivLwZUu"},"outputs":[{"data":{"text/html":["\n","  \u003cdiv id=\"df-40da91a9-455b-4eee-b6cd-65f9cfe9ff5b\"\u003e\n","    \u003cdiv class=\"colab-df-container\"\u003e\n","      \u003cdiv\u003e\n","\u003cstyle scoped\u003e\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","\u003c/style\u003e\n","\u003ctable border=\"1\" class=\"dataframe\"\u003e\n","  \u003cthead\u003e\n","    \u003ctr style=\"text-align: right;\"\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003eID\u003c/th\u003e\n","      \u003cth\u003eToxin_UniprotID\u003c/th\u003e\n","      \u003cth\u003eKmer_Position_start\u003c/th\u003e\n","      \u003cth\u003eKmer_Position_end\u003c/th\u003e\n","      \u003cth\u003eAntivenom\u003c/th\u003e\n","      \u003cth\u003eToxin_Kmer\u003c/th\u003e\n","      \u003cth\u003eGenus\u003c/th\u003e\n","      \u003cth\u003eSpecies\u003c/th\u003e\n","      \u003cth\u003eProteinFam\u003c/th\u003e\n","      \u003cth\u003eProteinSubFam\u003c/th\u003e\n","      \u003cth\u003eProteinSubSubFam\u003c/th\u003e\n","    \u003c/tr\u003e\n","  \u003c/thead\u003e\n","  \u003ctbody\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e36535\u003c/th\u003e\n","      \u003ctd\u003eP01405_VINS_Central_Africa_41\u003c/td\u003e\n","      \u003ctd\u003eP01405\u003c/td\u003e\n","      \u003ctd\u003e41\u003c/td\u003e\n","      \u003ctd\u003e56\u003c/td\u003e\n","      \u003ctd\u003eVINS_Central_Africa\u003c/td\u003e\n","      \u003ctd\u003ePKKEIFRKSIHCCRSD\u003c/td\u003e\n","      \u003ctd\u003eDendroaspis\u003c/td\u003e\n","      \u003ctd\u003eDendroaspis_viridis\u003c/td\u003e\n","      \u003ctd\u003eSnake_three_finger_toxin\u003c/td\u003e\n","      \u003ctd\u003eShort_chain_subfamily\u003c/td\u003e\n","      \u003ctd\u003eOrphan_group_XI_sub_subfamily\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e36536\u003c/th\u003e\n","      \u003ctd\u003eP01405_VINS_Central_Africa_42\u003c/td\u003e\n","      \u003ctd\u003eP01405\u003c/td\u003e\n","      \u003ctd\u003e42\u003c/td\u003e\n","      \u003ctd\u003e57\u003c/td\u003e\n","      \u003ctd\u003eVINS_Central_Africa\u003c/td\u003e\n","      \u003ctd\u003eKKEIFRKSIHCCRSDK\u003c/td\u003e\n","      \u003ctd\u003eDendroaspis\u003c/td\u003e\n","      \u003ctd\u003eDendroaspis_viridis\u003c/td\u003e\n","      \u003ctd\u003eSnake_three_finger_toxin\u003c/td\u003e\n","      \u003ctd\u003eShort_chain_subfamily\u003c/td\u003e\n","      \u003ctd\u003eOrphan_group_XI_sub_subfamily\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e36537\u003c/th\u003e\n","      \u003ctd\u003eP01405_VINS_Central_Africa_43\u003c/td\u003e\n","      \u003ctd\u003eP01405\u003c/td\u003e\n","      \u003ctd\u003e43\u003c/td\u003e\n","      \u003ctd\u003e58\u003c/td\u003e\n","      \u003ctd\u003eVINS_Central_Africa\u003c/td\u003e\n","      \u003ctd\u003eKEIFRKSIHCCRSDKC\u003c/td\u003e\n","      \u003ctd\u003eDendroaspis\u003c/td\u003e\n","      \u003ctd\u003eDendroaspis_viridis\u003c/td\u003e\n","      \u003ctd\u003eSnake_three_finger_toxin\u003c/td\u003e\n","      \u003ctd\u003eShort_chain_subfamily\u003c/td\u003e\n","      \u003ctd\u003eOrphan_group_XI_sub_subfamily\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e36538\u003c/th\u003e\n","      \u003ctd\u003eP01405_VINS_Central_Africa_44\u003c/td\u003e\n","      \u003ctd\u003eP01405\u003c/td\u003e\n","      \u003ctd\u003e44\u003c/td\u003e\n","      \u003ctd\u003e59\u003c/td\u003e\n","      \u003ctd\u003eVINS_Central_Africa\u003c/td\u003e\n","      \u003ctd\u003eEIFRKSIHCCRSDKCN\u003c/td\u003e\n","      \u003ctd\u003eDendroaspis\u003c/td\u003e\n","      \u003ctd\u003eDendroaspis_viridis\u003c/td\u003e\n","      \u003ctd\u003eSnake_three_finger_toxin\u003c/td\u003e\n","      \u003ctd\u003eShort_chain_subfamily\u003c/td\u003e\n","      \u003ctd\u003eOrphan_group_XI_sub_subfamily\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e36539\u003c/th\u003e\n","      \u003ctd\u003eP01405_VINS_Central_Africa_45\u003c/td\u003e\n","      \u003ctd\u003eP01405\u003c/td\u003e\n","      \u003ctd\u003e45\u003c/td\u003e\n","      \u003ctd\u003e60\u003c/td\u003e\n","      \u003ctd\u003eVINS_Central_Africa\u003c/td\u003e\n","      \u003ctd\u003eIFRKSIHCCRSDKCNE\u003c/td\u003e\n","      \u003ctd\u003eDendroaspis\u003c/td\u003e\n","      \u003ctd\u003eDendroaspis_viridis\u003c/td\u003e\n","      \u003ctd\u003eSnake_three_finger_toxin\u003c/td\u003e\n","      \u003ctd\u003eShort_chain_subfamily\u003c/td\u003e\n","      \u003ctd\u003eOrphan_group_XI_sub_subfamily\u003c/td\u003e\n","    \u003c/tr\u003e\n","  \u003c/tbody\u003e\n","\u003c/table\u003e\n","\u003c/div\u003e\n","      \u003cbutton class=\"colab-df-convert\" onclick=\"convertToInteractive('df-40da91a9-455b-4eee-b6cd-65f9cfe9ff5b')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\"\u003e\n","        \n","  \u003csvg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\"\u003e\n","    \u003cpath d=\"M0 0h24v24H0V0z\" fill=\"none\"/\u003e\n","    \u003cpath d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/\u003e\u003cpath d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/\u003e\n","  \u003c/svg\u003e\n","      \u003c/button\u003e\n","      \n","  \u003cstyle\u003e\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  \u003c/style\u003e\n","\n","      \u003cscript\u003e\n","        const buttonEl =\n","          document.querySelector('#df-40da91a9-455b-4eee-b6cd-65f9cfe9ff5b button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-40da91a9-455b-4eee-b6cd-65f9cfe9ff5b');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '\u003ca target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb\u003edata table notebook\u003c/a\u003e'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      \u003c/script\u003e\n","    \u003c/div\u003e\n","  \u003c/div\u003e\n","  "],"text/plain":["                                  ID Toxin_UniprotID  Kmer_Position_start  \\\n","36535  P01405_VINS_Central_Africa_41          P01405                   41   \n","36536  P01405_VINS_Central_Africa_42          P01405                   42   \n","36537  P01405_VINS_Central_Africa_43          P01405                   43   \n","36538  P01405_VINS_Central_Africa_44          P01405                   44   \n","36539  P01405_VINS_Central_Africa_45          P01405                   45   \n","\n","       Kmer_Position_end            Antivenom        Toxin_Kmer        Genus  \\\n","36535                 56  VINS_Central_Africa  PKKEIFRKSIHCCRSD  Dendroaspis   \n","36536                 57  VINS_Central_Africa  KKEIFRKSIHCCRSDK  Dendroaspis   \n","36537                 58  VINS_Central_Africa  KEIFRKSIHCCRSDKC  Dendroaspis   \n","36538                 59  VINS_Central_Africa  EIFRKSIHCCRSDKCN  Dendroaspis   \n","36539                 60  VINS_Central_Africa  IFRKSIHCCRSDKCNE  Dendroaspis   \n","\n","                   Species                ProteinFam          ProteinSubFam  \\\n","36535  Dendroaspis_viridis  Snake_three_finger_toxin  Short_chain_subfamily   \n","36536  Dendroaspis_viridis  Snake_three_finger_toxin  Short_chain_subfamily   \n","36537  Dendroaspis_viridis  Snake_three_finger_toxin  Short_chain_subfamily   \n","36538  Dendroaspis_viridis  Snake_three_finger_toxin  Short_chain_subfamily   \n","36539  Dendroaspis_viridis  Snake_three_finger_toxin  Short_chain_subfamily   \n","\n","                    ProteinSubSubFam  \n","36535  Orphan_group_XI_sub_subfamily  \n","36536  Orphan_group_XI_sub_subfamily  \n","36537  Orphan_group_XI_sub_subfamily  \n","36538  Orphan_group_XI_sub_subfamily  \n","36539  Orphan_group_XI_sub_subfamily  "]},"execution_count":null,"metadata":{},"output_type":"execute_result"}],"source":["test_df.tail()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"7D9tJqPbwbiQ"},"outputs":[{"data":{"text/html":["\n","  \u003cdiv id=\"df-9894a7be-d2fe-454f-b3c0-0796a2f69d7c\"\u003e\n","    \u003cdiv class=\"colab-df-container\"\u003e\n","      \u003cdiv\u003e\n","\u003cstyle scoped\u003e\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","\u003c/style\u003e\n","\u003ctable border=\"1\" class=\"dataframe\"\u003e\n","  \u003cthead\u003e\n","    \u003ctr style=\"text-align: right;\"\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003eID\u003c/th\u003e\n","      \u003cth\u003eToxin_UniprotID\u003c/th\u003e\n","      \u003cth\u003eKmer_Position_start\u003c/th\u003e\n","      \u003cth\u003eKmer_Position_end\u003c/th\u003e\n","      \u003cth\u003eAntivenom\u003c/th\u003e\n","      \u003cth\u003eToxin_Kmer\u003c/th\u003e\n","      \u003cth\u003eSignal\u003c/th\u003e\n","      \u003cth\u003eGenus\u003c/th\u003e\n","      \u003cth\u003eSpecies\u003c/th\u003e\n","      \u003cth\u003eProteinFam\u003c/th\u003e\n","      \u003cth\u003eProteinSubFam\u003c/th\u003e\n","      \u003cth\u003eProteinSubSubFam\u003c/th\u003e\n","    \u003c/tr\u003e\n","  \u003c/thead\u003e\n","  \u003ctbody\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e124112\u003c/th\u003e\n","      \u003ctd\u003eM5BGY5_VINS_Central_Africa_92\u003c/td\u003e\n","      \u003ctd\u003eM5BGY5\u003c/td\u003e\n","      \u003ctd\u003e92\u003c/td\u003e\n","      \u003ctd\u003e107\u003c/td\u003e\n","      \u003ctd\u003eVINS_Central_Africa\u003c/td\u003e\n","      \u003ctd\u003eDMNDYCTGTTPDCPRN\u003c/td\u003e\n","      \u003ctd\u003e1.06\u003c/td\u003e\n","      \u003ctd\u003eAtheris\u003c/td\u003e\n","      \u003ctd\u003eAtheris_chlorechis\u003c/td\u003e\n","      \u003ctd\u003eDisintegrin\u003c/td\u003e\n","      \u003ctd\u003eDimeric_disintegrin_subfamily\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e124113\u003c/th\u003e\n","      \u003ctd\u003eM5BGY5_VINS_Central_Africa_93\u003c/td\u003e\n","      \u003ctd\u003eM5BGY5\u003c/td\u003e\n","      \u003ctd\u003e93\u003c/td\u003e\n","      \u003ctd\u003e108\u003c/td\u003e\n","      \u003ctd\u003eVINS_Central_Africa\u003c/td\u003e\n","      \u003ctd\u003eMNDYCTGTTPDCPRNP\u003c/td\u003e\n","      \u003ctd\u003e0.80\u003c/td\u003e\n","      \u003ctd\u003eAtheris\u003c/td\u003e\n","      \u003ctd\u003eAtheris_chlorechis\u003c/td\u003e\n","      \u003ctd\u003eDisintegrin\u003c/td\u003e\n","      \u003ctd\u003eDimeric_disintegrin_subfamily\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e124114\u003c/th\u003e\n","      \u003ctd\u003eM5BGY5_VINS_Central_Africa_94\u003c/td\u003e\n","      \u003ctd\u003eM5BGY5\u003c/td\u003e\n","      \u003ctd\u003e94\u003c/td\u003e\n","      \u003ctd\u003e109\u003c/td\u003e\n","      \u003ctd\u003eVINS_Central_Africa\u003c/td\u003e\n","      \u003ctd\u003eNDYCTGTTPDCPRNPY\u003c/td\u003e\n","      \u003ctd\u003e0.43\u003c/td\u003e\n","      \u003ctd\u003eAtheris\u003c/td\u003e\n","      \u003ctd\u003eAtheris_chlorechis\u003c/td\u003e\n","      \u003ctd\u003eDisintegrin\u003c/td\u003e\n","      \u003ctd\u003eDimeric_disintegrin_subfamily\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e124115\u003c/th\u003e\n","      \u003ctd\u003eM5BGY5_VINS_Central_Africa_95\u003c/td\u003e\n","      \u003ctd\u003eM5BGY5\u003c/td\u003e\n","      \u003ctd\u003e95\u003c/td\u003e\n","      \u003ctd\u003e110\u003c/td\u003e\n","      \u003ctd\u003eVINS_Central_Africa\u003c/td\u003e\n","      \u003ctd\u003eDYCTGTTPDCPRNPYK\u003c/td\u003e\n","      \u003ctd\u003e1.46\u003c/td\u003e\n","      \u003ctd\u003eAtheris\u003c/td\u003e\n","      \u003ctd\u003eAtheris_chlorechis\u003c/td\u003e\n","      \u003ctd\u003eDisintegrin\u003c/td\u003e\n","      \u003ctd\u003eDimeric_disintegrin_subfamily\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e124116\u003c/th\u003e\n","      \u003ctd\u003eM5BGY5_VINS_Central_Africa_96\u003c/td\u003e\n","      \u003ctd\u003eM5BGY5\u003c/td\u003e\n","      \u003ctd\u003e96\u003c/td\u003e\n","      \u003ctd\u003e111\u003c/td\u003e\n","      \u003ctd\u003eVINS_Central_Africa\u003c/td\u003e\n","      \u003ctd\u003eYCTGTTPDCPRNPYKD\u003c/td\u003e\n","      \u003ctd\u003e1.47\u003c/td\u003e\n","      \u003ctd\u003eAtheris\u003c/td\u003e\n","      \u003ctd\u003eAtheris_chlorechis\u003c/td\u003e\n","      \u003ctd\u003eDisintegrin\u003c/td\u003e\n","      \u003ctd\u003eDimeric_disintegrin_subfamily\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","    \u003c/tr\u003e\n","  \u003c/tbody\u003e\n","\u003c/table\u003e\n","\u003c/div\u003e\n","      \u003cbutton class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9894a7be-d2fe-454f-b3c0-0796a2f69d7c')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\"\u003e\n","        \n","  \u003csvg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\"\u003e\n","    \u003cpath d=\"M0 0h24v24H0V0z\" fill=\"none\"/\u003e\n","    \u003cpath d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/\u003e\u003cpath d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/\u003e\n","  \u003c/svg\u003e\n","      \u003c/button\u003e\n","      \n","  \u003cstyle\u003e\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  \u003c/style\u003e\n","\n","      \u003cscript\u003e\n","        const buttonEl =\n","          document.querySelector('#df-9894a7be-d2fe-454f-b3c0-0796a2f69d7c button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-9894a7be-d2fe-454f-b3c0-0796a2f69d7c');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '\u003ca target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb\u003edata table notebook\u003c/a\u003e'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      \u003c/script\u003e\n","    \u003c/div\u003e\n","  \u003c/div\u003e\n","  "],"text/plain":["                                   ID Toxin_UniprotID  Kmer_Position_start  \\\n","124112  M5BGY5_VINS_Central_Africa_92          M5BGY5                   92   \n","124113  M5BGY5_VINS_Central_Africa_93          M5BGY5                   93   \n","124114  M5BGY5_VINS_Central_Africa_94          M5BGY5                   94   \n","124115  M5BGY5_VINS_Central_Africa_95          M5BGY5                   95   \n","124116  M5BGY5_VINS_Central_Africa_96          M5BGY5                   96   \n","\n","        Kmer_Position_end            Antivenom        Toxin_Kmer  Signal  \\\n","124112                107  VINS_Central_Africa  DMNDYCTGTTPDCPRN    1.06   \n","124113                108  VINS_Central_Africa  MNDYCTGTTPDCPRNP    0.80   \n","124114                109  VINS_Central_Africa  NDYCTGTTPDCPRNPY    0.43   \n","124115                110  VINS_Central_Africa  DYCTGTTPDCPRNPYK    1.46   \n","124116                111  VINS_Central_Africa  YCTGTTPDCPRNPYKD    1.47   \n","\n","          Genus             Species   ProteinFam  \\\n","124112  Atheris  Atheris_chlorechis  Disintegrin   \n","124113  Atheris  Atheris_chlorechis  Disintegrin   \n","124114  Atheris  Atheris_chlorechis  Disintegrin   \n","124115  Atheris  Atheris_chlorechis  Disintegrin   \n","124116  Atheris  Atheris_chlorechis  Disintegrin   \n","\n","                        ProteinSubFam ProteinSubSubFam  \n","124112  Dimeric_disintegrin_subfamily              NaN  \n","124113  Dimeric_disintegrin_subfamily              NaN  \n","124114  Dimeric_disintegrin_subfamily              NaN  \n","124115  Dimeric_disintegrin_subfamily              NaN  \n","124116  Dimeric_disintegrin_subfamily              NaN  "]},"execution_count":null,"metadata":{},"output_type":"execute_result"}],"source":["train_df.tail()"]},{"cell_type":"markdown","metadata":{"id":"jwTdT0UVwfL_"},"source":["Each row in the dataset represents a k-mer (16 amino acid sequence within the toxin) and it has a signal column coming from the high-density peptide microarray experiment. The dataframe has the following columns :\n","```\n","ID: Unique identifier for each row \n","Toxin_UniprotID: Identifier for a specific toxin sequence in the Uniprot Database\n","Kmer_Position_start: The start position in the toxin global sequence of the Kmer_Position_end: The end  position in the toxin global sequence a given k-mer \n","Antivenom: Name of the antivenom tested in the high-density peptide microarray experiment\n","Toxin_Kmer: String of 16 amino acids (16-mer, K=16) from a given toxin sequence\n","Signal: (target) The output of the experiment. A proxy for antivenom activity.\n","Genus: Genus of snake the toxin stems from, e.g. Naja (cobra)\n","Species: Species of snake the toxin originates from e.g. Naja nigricollis (Black-necked spitting cobra)\n","ProteinFam: Toxin protein family, e.g. three finger toxin (3FTx)\n","ProteinSubFam: Toxin sub-family, e.g. cytotoxin (a type of 3FTx)\n","ProteinSubSubFam: Toxin sub-sub-family, e.g. cytotoxin IA (a type of cytotoxin)\n","```\n","\n","We can use any of these colums to train our ML model.\n","\n","For our model, we will use the `Antivenom` and the `Toxin_Kmer` and the `Kmer_Position_start` columns."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"VuEpdZUWbEBR"},"outputs":[],"source":["# train_df.rename({\"Toxin_K_mer\":\"Toxin_Kmer\", \"Position_start\":\"Kmer_Position_start\", \"Position_end\":\"Kmer_Position_end\"}, axis=1, inplace=True)\n","# test_df.rename({\"Toxin_K_mer\":\"Toxin_Kmer\", \"Position_start\":\"Kmer_Position_start\", \"Position_end\":\"Kmer_Position_end\"}, axis=1, inplace=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"7t19eyWLwdi_"},"outputs":[],"source":["def get_seq_column_map(train, test, col):\n","    sequences = []\n","    for seq in train[col]:\n","        sequences.extend(list(seq))\n","    for seq in test[col]:\n","        sequences.extend(list(seq))\n","    unique = np.unique(sequences)\n","    return {k: v for k, v in zip(unique, range(len(unique)))}\n","\n","def get_column_map(train, test, col):\n","    sequences = []\n","    unique_values = pd.concat([train[col], test[col]]).unique().tolist()\n","    return {k: v for k, v in zip(unique_values, range(len(unique_values)))}"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"JgH777gNxR8Z"},"outputs":[{"data":{"text/plain":["Index(['ID', 'Toxin_UniprotID', 'Antivenom', 'Toxin_Kmer', 'Genus', 'Species',\n","       'ProteinFam', 'ProteinSubFam', 'ProteinSubSubFam'],\n","      dtype='object')"]},"execution_count":null,"metadata":{},"output_type":"execute_result"}],"source":["train_df.select_dtypes(\"object\").columns"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"jTTjPAPN4b5c"},"outputs":[{"name":"stdout","output_type":"stream","text":["unique amino acid map 20\n","unique Antivenom map 8\n","unique Genus map 8\n","unique Species map 32\n","unique ProteinFam map 17\n"]}],"source":["amino_acid_map = get_seq_column_map(train_df, test_df, \"Toxin_Kmer\")\n","print(\"unique amino acid map\",len(amino_acid_map))\n","\n","antivenom_map = get_column_map(train_df, test_df, \"Antivenom\")\n","print(\"unique Antivenom map\", len(antivenom_map))\n","\n","genus_map = get_column_map(train_df, test_df, \"Genus\")\n","print(\"unique Genus map\", len(genus_map))\n","\n","species_map = get_column_map(train_df, test_df, \"Species\")\n","print(\"unique Species map\", len(species_map))\n","\n","proteinfam_map = get_column_map(train_df, test_df, \"ProteinFam\")\n","print(\"unique ProteinFam map\", len(proteinfam_map))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"pL58D6zMLZ9i"},"outputs":[{"data":{"text/plain":["{'A': 0,\n"," 'C': 1,\n"," 'D': 2,\n"," 'E': 3,\n"," 'F': 4,\n"," 'G': 5,\n"," 'H': 6,\n"," 'I': 7,\n"," 'K': 8,\n"," 'L': 9,\n"," 'M': 10,\n"," 'N': 11,\n"," 'P': 12,\n"," 'Q': 13,\n"," 'R': 14,\n"," 'S': 15,\n"," 'T': 16,\n"," 'V': 17,\n"," 'W': 18,\n"," 'Y': 19}"]},"execution_count":null,"metadata":{},"output_type":"execute_result"}],"source":["amino_acid_map"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"-yGlKpQoLboj"},"outputs":[{"data":{"text/plain":["{'Bioclone': 0,\n"," 'ICP': 1,\n"," 'Inosan': 2,\n"," 'Premium': 3,\n"," 'SAVP': 4,\n"," 'Sanofi_Pasteur': 5,\n"," 'VINS_Africa': 6,\n"," 'VINS_Central_Africa': 7}"]},"execution_count":null,"metadata":{},"output_type":"execute_result"}],"source":["antivenom_map"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"TFiyU4c2ErsF"},"outputs":[{"data":{"text/plain":["{'Aspidelaps': 0,\n"," 'Atheris': 7,\n"," 'Bitis': 5,\n"," 'Dendroaspis': 6,\n"," 'Dispholidus': 4,\n"," 'Echis': 1,\n"," 'Hemachatus': 3,\n"," 'Naja': 2}"]},"execution_count":null,"metadata":{},"output_type":"execute_result"}],"source":["genus_map"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"8duWF8BREtBU"},"outputs":[{"data":{"text/plain":["{'Aspidelaps_scutatus': 0,\n"," 'Atheris_chlorechis': 27,\n"," 'Atheris_nitschei': 31,\n"," 'Atheris_squamigera': 28,\n"," 'Bitis_arietans': 19,\n"," 'Bitis_caudalis': 29,\n"," 'Bitis_gabonica': 20,\n"," 'Bitis_nasicornis': 21,\n"," 'Bitis_rhinoceros': 22,\n"," 'Dendroaspis_angusticeps': 23,\n"," 'Dendroaspis_jamesoni': 24,\n"," 'Dendroaspis_polylepis': 25,\n"," 'Dendroaspis_viridis': 26,\n"," 'Dispholidus_typus': 18,\n"," 'Echis_carinatus': 1,\n"," 'Echis_coloratus': 2,\n"," 'Echis_leucogaster': 3,\n"," 'Echis_multisquamatus': 4,\n"," 'Echis_ocellatus': 5,\n"," 'Echis_pyramidum': 6,\n"," 'Hemachatus_haemachatus': 17,\n"," 'Naja_anchietae': 7,\n"," 'Naja_annulata': 8,\n"," 'Naja_annulifera': 9,\n"," 'Naja_christyi': 30,\n"," 'Naja_haje': 10,\n"," 'Naja_melanoleuca': 11,\n"," 'Naja_mossambica': 12,\n"," 'Naja_nigricollis': 13,\n"," 'Naja_nivea': 14,\n"," 'Naja_oxiana': 15,\n"," 'Naja_pallida': 16}"]},"execution_count":null,"metadata":{},"output_type":"execute_result"}],"source":["species_map"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"5xTumKwBExwB"},"outputs":[{"data":{"text/plain":["{'AVIT_prokineticin': 15,\n"," 'CRISP': 2,\n"," 'Cystatin': 14,\n"," 'Disintegrin': 3,\n"," 'Flavin_monoamine_oxidase': 7,\n"," 'Glycosyl_hydrolase_56': 10,\n"," 'NGF_beta': 16,\n"," 'Natriuretic_peptide': 13,\n"," 'PDGF_VEGF_growth_factor': 11,\n"," 'Peptidase_S1': 6,\n"," 'Phospholipase_A2': 0,\n"," 'Snaclec': 5,\n"," 'Snake_three_finger_toxin': 1,\n"," 'Snake_waprin': 8,\n"," 'True_venom_lectin': 12,\n"," 'Venom_Kunitz_type': 9,\n"," 'Venom_metalloproteinase_M12B': 4}"]},"execution_count":null,"metadata":{},"output_type":"execute_result"}],"source":["proteinfam_map"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"f_zlysl9qmvL"},"outputs":[],"source":["def one_gram(kmer):\n","  count_acides_map = collections.Counter(kmer)\n","  default_acide_map = {k:0 for k in amino_acid_map.keys()}\n","  count_acides_map.update(default_acide_map)\n","  f_i_acides = {k:v for k, v in dict(count_acides_map).items()}\n","  return list(f_i_acides.values())\n","\n","def get_one_grams(df):\n","  names = list(amino_acid_map.keys())\n","  toxin_kmer_preprocessed = [one_gram(x) for x in tqdm(df[\"Toxin_Kmer\"].values.tolist())]\n","  toxin_kmer_preprocessed = pd.DataFrame(data = np.array(toxin_kmer_preprocessed), columns = names)\n","  return toxin_kmer_preprocessed\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"EKJ_QUM7uv_O"},"outputs":[],"source":["def bi_gram(kmer, r):\n","  kmer = train_df[\"Toxin_Kmer\"][0]\n","  bigram_count = collections.Counter([kmer[i:i+2] for i in range(16) if len(kmer[i:i+2])==r])\n","  default_map = {k:0 for k in [\"\".join(x) for x in list(product(amino_acid_map.keys(), repeat=r))]}\n","  bigram_count.update(default_map)\n","  f_i_acides = {k:v for k, v in dict(bigram_count).items()}  \n","  return list(f_i_acides.values())\n","\n","def get_bi_grams(df, r):\n","  names = [\"\".join(x) for x in list(product(amino_acid_map.keys(), repeat=r))]\n","  toxin_kmer_preprocessed = [bi_gram(x, r) for x in tqdm(df[\"Toxin_Kmer\"].values.tolist())]\n","  toxin_kmer_preprocessed = pd.DataFrame(data = np.array(toxin_kmer_preprocessed), columns = names)\n","  return toxin_kmer_preprocessed"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"r25lmoQTw3Zt"},"outputs":[{"name":"stderr","output_type":"stream","text":["100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 124117/124117 [00:03\u003c00:00, 37375.43it/s]\n","100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 124117/124117 [00:57\u003c00:00, 2174.87it/s]\n","100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 36540/36540 [00:00\u003c00:00, 52916.89it/s]\n","100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 36540/36540 [00:12\u003c00:00, 2962.65it/s]\n"]}],"source":["train_add = pd.concat([get_one_grams(train_df), get_bi_grams(train_df, 2)], axis = 1)\n","test_add = pd.concat([get_one_grams(test_df), get_bi_grams(test_df, 2)], axis = 1)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"69JjkLxN4i6q"},"outputs":[{"data":{"text/plain":["((124117, 420), (36540, 420))"]},"execution_count":null,"metadata":{},"output_type":"execute_result"}],"source":["train_add.shape, test_add.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"JnuZByTA4qBw"},"outputs":[{"name":"stdout","output_type":"stream","text":["['S', 'T', 'V', 'W', 'Y', 'AS', 'AT', 'AV', 'AW', 'AY', 'CA', 'CC', 'CD', 'CE', 'CF', 'CG', 'CH', 'CI', 'CK', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CV', 'CW', 'CY', 'DA', 'DC', 'DD', 'DE', 'DF', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DN', 'DP', 'DQ', 'DR', 'DS', 'DT', 'DV', 'DW', 'DY', 'EA', 'EC', 'ED', 'EE', 'EF', 'EG', 'EH', 'EI', 'EK', 'EL', 'EM', 'EN', 'EP', 'EQ', 'ER', 'ES', 'ET', 'EV', 'EW', 'EY', 'FA', 'FC', 'FD', 'FE', 'FF', 'FG', 'FH', 'FI', 'FK', 'FL', 'FM', 'FN', 'FP', 'FQ', 'FR', 'FS', 'FT', 'FV', 'FW', 'FY', 'GA', 'GC', 'GD', 'GE', 'GF', 'GG', 'GH', 'GI', 'GK', 'GL', 'GM', 'GN', 'GP', 'GQ', 'GR', 'GS', 'GT', 'GV', 'GW', 'GY', 'HA', 'HC', 'HD', 'HE', 'HF', 'HG', 'HH', 'HI', 'HK', 'HL', 'HM', 'HN', 'HP', 'HQ', 'HR', 'HS', 'HT', 'HV', 'HW', 'HY', 'IA', 'IC', 'ID', 'IE', 'IF', 'IG', 'IH', 'II', 'IK', 'IL', 'IM', 'IN', 'IP', 'IQ', 'IR', 'IS', 'IT', 'IV', 'IW', 'IY', 'KA', 'KC', 'KD', 'KE', 'KF', 'KG', 'KH', 'KI', 'KK', 'KL', 'KM', 'KN', 'KP', 'KQ', 'KR', 'KS', 'KT', 'KV', 'KW', 'KY', 'LA', 'LC', 'LD', 'LE', 'LF', 'LG', 'LH', 'LI', 'LK', 'LL', 'LM', 'LN', 'LP', 'LQ', 'LR', 'LS', 'LT', 'LV', 'LW', 'LY', 'MA', 'MC', 'MD', 'ME', 'MF', 'MG', 'MH', 'MI', 'MK', 'ML', 'MM', 'MN', 'MP', 'MQ', 'MR', 'MS', 'MT', 'MV', 'MW', 'MY', 'NA', 'NC', 'ND', 'NE', 'NF', 'NG', 'NH', 'NI', 'NK', 'NL', 'NM', 'NN', 'NP', 'NQ', 'NR', 'NS', 'NT', 'NV', 'NW', 'NY', 'PA', 'PC', 'PD', 'PE', 'PF', 'PG', 'PH', 'PI', 'PK', 'PL', 'PM', 'PN', 'PP', 'PQ', 'PR', 'PS', 'PT', 'PV', 'PW', 'PY', 'QA', 'QC', 'QD', 'QE', 'QF', 'QG', 'QH', 'QI', 'QK', 'QL', 'QM', 'QN', 'QP', 'QQ', 'QR', 'QS', 'QT', 'QV', 'QW', 'QY', 'RA', 'RC', 'RD', 'RE', 'RF', 'RG', 'RH', 'RI', 'RK', 'RL', 'RM', 'RN', 'RP', 'RQ', 'RR', 'RS', 'RT', 'RV', 'RW', 'RY', 'SA', 'SC', 'SD', 'SE', 'SF', 'SG', 'SH', 'SI', 'SK', 'SL', 'SM', 'SN', 'SP', 'SQ', 'SR', 'SS', 'ST', 'SV', 'SW', 'SY', 'TA', 'TC', 'TD', 'TE', 'TF', 'TG', 'TH', 'TI', 'TK', 'TL', 'TM', 'TN', 'TP', 'TQ', 'TR', 'TS', 'TT', 'TV', 'TW', 'TY', 'VA', 'VC', 'VD', 'VE', 'VF', 'VG', 'VH', 'VI', 'VK', 'VL', 'VM', 'VN', 'VP', 'VQ', 'VR', 'VS', 'VT', 'VV', 'VW', 'VY', 'WA', 'WC', 'WD', 'WE', 'WF', 'WG', 'WH', 'WI', 'WK', 'WL', 'WM', 'WN', 'WP', 'WQ', 'WR', 'WS', 'WT', 'WV', 'WW', 'WY', 'YA', 'YC', 'YD', 'YE', 'YF', 'YG', 'YH', 'YI', 'YK', 'YL', 'YM', 'YN', 'YP', 'YQ', 'YR', 'YS', 'YT', 'YV', 'YW', 'YY']\n"]}],"source":["print(list(train_add.var()[train_add.var()==0].index))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"yH-QfeXk4t8L"},"outputs":[{"name":"stdout","output_type":"stream","text":["['S', 'T', 'V', 'W', 'Y', 'AA', 'AC', 'AD', 'AE', 'AF', 'AG', 'AH', 'AI', 'AK', 'AL', 'AM', 'AN', 'AP', 'AQ', 'AR', 'AS', 'AT', 'AV', 'AW', 'AY', 'CA', 'CC', 'CD', 'CE', 'CF', 'CG', 'CH', 'CI', 'CK', 'CL', 'CM', 'CN', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CV', 'CW', 'CY', 'DA', 'DC', 'DD', 'DE', 'DF', 'DG', 'DH', 'DI', 'DK', 'DL', 'DM', 'DN', 'DP', 'DQ', 'DR', 'DS', 'DT', 'DV', 'DW', 'DY', 'EA', 'EC', 'ED', 'EE', 'EF', 'EG', 'EH', 'EI', 'EK', 'EL', 'EM', 'EN', 'EP', 'EQ', 'ER', 'ES', 'ET', 'EV', 'EW', 'EY', 'FA', 'FC', 'FD', 'FE', 'FF', 'FG', 'FH', 'FI', 'FK', 'FL', 'FM', 'FN', 'FP', 'FQ', 'FR', 'FS', 'FT', 'FV', 'FW', 'FY', 'GA', 'GC', 'GD', 'GE', 'GF', 'GG', 'GH', 'GI', 'GK', 'GL', 'GM', 'GN', 'GP', 'GQ', 'GR', 'GS', 'GT', 'GV', 'GW', 'GY', 'HA', 'HC', 'HD', 'HE', 'HF', 'HG', 'HH', 'HI', 'HK', 'HL', 'HM', 'HN', 'HP', 'HQ', 'HR', 'HS', 'HT', 'HV', 'HW', 'HY', 'IA', 'IC', 'ID', 'IE', 'IF', 'IG', 'IH', 'II', 'IK', 'IL', 'IM', 'IN', 'IP', 'IQ', 'IR', 'IS', 'IT', 'IV', 'IW', 'IY', 'KA', 'KC', 'KD', 'KE', 'KF', 'KG', 'KH', 'KI', 'KK', 'KL', 'KM', 'KN', 'KP', 'KQ', 'KR', 'KS', 'KT', 'KV', 'KW', 'KY', 'LA', 'LC', 'LD', 'LE', 'LF', 'LG', 'LH', 'LI', 'LK', 'LL', 'LM', 'LN', 'LP', 'LQ', 'LR', 'LS', 'LT', 'LV', 'LW', 'LY', 'MA', 'MC', 'MD', 'ME', 'MF', 'MG', 'MH', 'MI', 'MK', 'ML', 'MM', 'MN', 'MP', 'MQ', 'MR', 'MS', 'MT', 'MV', 'MW', 'MY', 'NA', 'NC', 'ND', 'NE', 'NF', 'NG', 'NH', 'NI', 'NK', 'NL', 'NM', 'NN', 'NP', 'NQ', 'NR', 'NS', 'NT', 'NV', 'NW', 'NY', 'PA', 'PC', 'PD', 'PE', 'PF', 'PG', 'PH', 'PI', 'PK', 'PL', 'PM', 'PN', 'PP', 'PQ', 'PR', 'PS', 'PT', 'PV', 'PW', 'PY', 'QA', 'QC', 'QD', 'QE', 'QF', 'QG', 'QH', 'QI', 'QK', 'QL', 'QM', 'QN', 'QP', 'QQ', 'QR', 'QS', 'QT', 'QV', 'QW', 'QY', 'RA', 'RC', 'RD', 'RE', 'RF', 'RG', 'RH', 'RI', 'RK', 'RL', 'RM', 'RN', 'RP', 'RQ', 'RR', 'RS', 'RT', 'RV', 'RW', 'RY', 'SA', 'SC', 'SD', 'SE', 'SF', 'SG', 'SH', 'SI', 'SK', 'SL', 'SM', 'SN', 'SP', 'SQ', 'SR', 'SS', 'ST', 'SV', 'SW', 'SY', 'TA', 'TC', 'TD', 'TE', 'TF', 'TG', 'TH', 'TI', 'TK', 'TL', 'TM', 'TN', 'TP', 'TQ', 'TR', 'TS', 'TT', 'TV', 'TW', 'TY', 'VA', 'VC', 'VD', 'VE', 'VF', 'VG', 'VH', 'VI', 'VK', 'VL', 'VM', 'VN', 'VP', 'VQ', 'VR', 'VS', 'VT', 'VV', 'VW', 'VY', 'WA', 'WC', 'WD', 'WE', 'WF', 'WG', 'WH', 'WI', 'WK', 'WL', 'WM', 'WN', 'WP', 'WQ', 'WR', 'WS', 'WT', 'WV', 'WW', 'WY', 'YA', 'YC', 'YD', 'YE', 'YF', 'YG', 'YH', 'YI', 'YK', 'YL', 'YM', 'YN', 'YP', 'YQ', 'YR', 'YS', 'YT', 'YV', 'YW', 'YY']\n"]}],"source":["print(list(test_add.var()[test_add.var()==0].index))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"Kw9JmqSYbEBh"},"outputs":[],"source":["train_add.drop(list(test_add.var()[test_add.var()==0].index), axis=1, inplace=True)\n","test_add.drop(list(test_add.var()[test_add.var()==0].index), axis=1, inplace=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"7pk083n5bEBh"},"outputs":[{"data":{"text/html":["\n","  \u003cdiv id=\"df-798c74b0-580b-45c9-be75-06677d14e4be\"\u003e\n","    \u003cdiv class=\"colab-df-container\"\u003e\n","      \u003cdiv\u003e\n","\u003cstyle scoped\u003e\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","\u003c/style\u003e\n","\u003ctable border=\"1\" class=\"dataframe\"\u003e\n","  \u003cthead\u003e\n","    \u003ctr style=\"text-align: right;\"\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003eA\u003c/th\u003e\n","      \u003cth\u003eC\u003c/th\u003e\n","      \u003cth\u003eD\u003c/th\u003e\n","      \u003cth\u003eE\u003c/th\u003e\n","      \u003cth\u003eF\u003c/th\u003e\n","      \u003cth\u003eG\u003c/th\u003e\n","      \u003cth\u003eH\u003c/th\u003e\n","      \u003cth\u003eI\u003c/th\u003e\n","      \u003cth\u003eK\u003c/th\u003e\n","      \u003cth\u003eL\u003c/th\u003e\n","      \u003cth\u003eM\u003c/th\u003e\n","      \u003cth\u003eN\u003c/th\u003e\n","      \u003cth\u003eP\u003c/th\u003e\n","      \u003cth\u003eQ\u003c/th\u003e\n","      \u003cth\u003eR\u003c/th\u003e\n","    \u003c/tr\u003e\n","  \u003c/thead\u003e\n","  \u003ctbody\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e124112\u003c/th\u003e\n","      \u003ctd\u003e3\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e3\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e124113\u003c/th\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e3\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e3\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e124114\u003c/th\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e3\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e3\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e124115\u003c/th\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e3\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e3\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e124116\u003c/th\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e3\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e3\u003c/td\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","    \u003c/tr\u003e\n","  \u003c/tbody\u003e\n","\u003c/table\u003e\n","\u003c/div\u003e\n","      \u003cbutton class=\"colab-df-convert\" onclick=\"convertToInteractive('df-798c74b0-580b-45c9-be75-06677d14e4be')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\"\u003e\n","        \n","  \u003csvg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\"\u003e\n","    \u003cpath d=\"M0 0h24v24H0V0z\" fill=\"none\"/\u003e\n","    \u003cpath d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/\u003e\u003cpath d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/\u003e\n","  \u003c/svg\u003e\n","      \u003c/button\u003e\n","      \n","  \u003cstyle\u003e\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  \u003c/style\u003e\n","\n","      \u003cscript\u003e\n","        const buttonEl =\n","          document.querySelector('#df-798c74b0-580b-45c9-be75-06677d14e4be button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-798c74b0-580b-45c9-be75-06677d14e4be');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '\u003ca target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb\u003edata table notebook\u003c/a\u003e'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      \u003c/script\u003e\n","    \u003c/div\u003e\n","  \u003c/div\u003e\n","  "],"text/plain":["        A  C  D  E  F  G  H  I  K  L  M  N  P  Q  R\n","124112  3  1  2  1  2  3  1  2  1  0  0  0  0  0  0\n","124113  1  2  2  1  2  3  1  3  1  0  0  0  0  0  0\n","124114  2  2  2  2  3  1  3  1  0  0  0  0  0  0  0\n","124115  2  2  2  3  1  3  1  1  1  0  0  0  0  0  0\n","124116  2  2  3  1  3  2  1  1  1  0  0  0  0  0  0"]},"execution_count":null,"metadata":{},"output_type":"execute_result"}],"source":["train_add.tail()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"q8MpA4HDbEBi"},"outputs":[{"data":{"text/html":["\n","  \u003cdiv id=\"df-75e03268-6278-4392-9e13-e32547f3f99d\"\u003e\n","    \u003cdiv class=\"colab-df-container\"\u003e\n","      \u003cdiv\u003e\n","\u003cstyle scoped\u003e\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","\u003c/style\u003e\n","\u003ctable border=\"1\" class=\"dataframe\"\u003e\n","  \u003cthead\u003e\n","    \u003ctr style=\"text-align: right;\"\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003eA\u003c/th\u003e\n","      \u003cth\u003eC\u003c/th\u003e\n","      \u003cth\u003eD\u003c/th\u003e\n","      \u003cth\u003eE\u003c/th\u003e\n","      \u003cth\u003eF\u003c/th\u003e\n","      \u003cth\u003eG\u003c/th\u003e\n","      \u003cth\u003eH\u003c/th\u003e\n","      \u003cth\u003eI\u003c/th\u003e\n","      \u003cth\u003eK\u003c/th\u003e\n","      \u003cth\u003eL\u003c/th\u003e\n","      \u003cth\u003eM\u003c/th\u003e\n","      \u003cth\u003eN\u003c/th\u003e\n","      \u003cth\u003eP\u003c/th\u003e\n","      \u003cth\u003eQ\u003c/th\u003e\n","      \u003cth\u003eR\u003c/th\u003e\n","    \u003c/tr\u003e\n","  \u003c/thead\u003e\n","  \u003ctbody\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e36535\u003c/th\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e3\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e36536\u003c/th\u003e\n","      \u003ctd\u003e4\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e36537\u003c/th\u003e\n","      \u003ctd\u003e3\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e3\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e36538\u003c/th\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e3\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e36539\u003c/th\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e3\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","    \u003c/tr\u003e\n","  \u003c/tbody\u003e\n","\u003c/table\u003e\n","\u003c/div\u003e\n","      \u003cbutton class=\"colab-df-convert\" onclick=\"convertToInteractive('df-75e03268-6278-4392-9e13-e32547f3f99d')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\"\u003e\n","        \n","  \u003csvg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\"\u003e\n","    \u003cpath d=\"M0 0h24v24H0V0z\" fill=\"none\"/\u003e\n","    \u003cpath d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/\u003e\u003cpath d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/\u003e\n","  \u003c/svg\u003e\n","      \u003c/button\u003e\n","      \n","  \u003cstyle\u003e\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  \u003c/style\u003e\n","\n","      \u003cscript\u003e\n","        const buttonEl =\n","          document.querySelector('#df-75e03268-6278-4392-9e13-e32547f3f99d button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-75e03268-6278-4392-9e13-e32547f3f99d');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '\u003ca target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb\u003edata table notebook\u003c/a\u003e'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      \u003c/script\u003e\n","    \u003c/div\u003e\n","  \u003c/div\u003e\n","  "],"text/plain":["       A  C  D  E  F  G  H  I  K  L  M  N  P  Q  R\n","36535  1  3  1  2  1  2  2  1  2  1  0  0  0  0  0\n","36536  4  1  2  1  2  2  1  2  1  0  0  0  0  0  0\n","36537  3  1  2  1  2  2  1  3  1  0  0  0  0  0  0\n","36538  1  2  1  2  2  2  1  3  1  1  0  0  0  0  0\n","36539  2  1  2  2  2  1  3  1  1  1  0  0  0  0  0"]},"execution_count":null,"metadata":{},"output_type":"execute_result"}],"source":["test_add.tail()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"sxSj-wL2bEBi"},"outputs":[{"data":{"text/plain":["((124117, 15), (36540, 15))"]},"execution_count":null,"metadata":{},"output_type":"execute_result"}],"source":["train_add.shape, test_add.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"_PphTrmWbEBj"},"outputs":[{"data":{"text/plain":["['A', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'K', 'L', 'M', 'N', 'P', 'Q', 'R']"]},"execution_count":null,"metadata":{},"output_type":"execute_result"}],"source":["additional_cols = train_add.columns.tolist()\n","additional_cols"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"1LzeMm6_bEBk"},"outputs":[],"source":["train_add.to_csv(\"Data/train_add.csv\", index=False)\n","test_add.to_csv(\"Data/test_add.csv\", index=False)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"NCs8Cu1YbEBl"},"outputs":[],"source":["train_df = pd.concat([train_df, train_add], axis=1)\n","test_df = pd.concat([test_df, test_add], axis=1)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"TbSadZ5TexB2"},"outputs":[],"source":["def acid_processing(acid):\n","\n","  toxin_map = {k:[0]*16 for k in amino_acid_map.keys()}\n","\n","  for i, acide in enumerate(acid):\n","      toxin_map[acide][i] = 1\n","\n","  return np.array(list(toxin_map.values())).ravel().tolist()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"d3Xw2W0ufgt3"},"outputs":[],"source":["names = [\"\".join([str(c) for c in x ])for x in list(product(list(amino_acid_map.keys()), range(16)))]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"evDFKRrhex2f"},"outputs":[],"source":["def get_toxin_kmer(df):\n","  toxin_kmer_preprocessed = [acid_processing(x) for x in tqdm(df[\"Toxin_Kmer\"].values.tolist())]\n","  toxin_kmer_preprocessed = pd.DataFrame(data = np.array(toxin_kmer_preprocessed), columns = names)\n","  return toxin_kmer_preprocessed"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"3L13GnaOe9YQ"},"outputs":[{"name":"stderr","output_type":"stream","text":["100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 124117/124117 [00:06\u003c00:00, 19048.41it/s]\n","100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 36540/36540 [00:01\u003c00:00, 18357.41it/s]\n"]}],"source":["train_df = pd.concat([get_toxin_kmer(train_df), train_df], axis=1)\n","test_df = pd.concat([get_toxin_kmer(test_df), test_df], axis=1)"]},{"cell_type":"markdown","metadata":{"id":"YSDgPC4YNm1w"},"source":["We will split the data into a training and a validation set"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"845bbc44-ab69-403f-99ed-87ee2b7352f4"},"outputs":[{"name":"stdout","output_type":"stream","text":["train: 98854, unique UniprotID 189\n","test: 25263, unique UniprotID 48\n"]}],"source":["UniprotID_train, UniprotID_val = train_test_split(train_df[\"Toxin_UniprotID\"].unique(), test_size=0.2, random_state=20199)\n","\n","train_split_df = train_df[train_df.Toxin_UniprotID.isin(UniprotID_train)]\n","val_split_df = train_df[train_df.Toxin_UniprotID.isin(UniprotID_val)]\n","\n","print(f\"train: {len(train_split_df)}, unique UniprotID {train_split_df.Toxin_UniprotID.nunique()}\")\n","print(f\"test: {len(val_split_df)}, unique UniprotID {val_split_df.Toxin_UniprotID.nunique()}\")"]},{"cell_type":"markdown","metadata":{"id":"49jlxU1QN4s3"},"source":["We look at the GPU provided by Colab"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"810517e6-008a-485c-8f6d-74db2cfb1770"},"outputs":[{"name":"stdout","output_type":"stream","text":["device : cuda\n"]},{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'Tesla K80'"]},"execution_count":null,"metadata":{},"output_type":"execute_result"}],"source":["device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n","print(f\"device : {device}\")\n","torch.cuda.get_device_name()"]},{"cell_type":"markdown","metadata":{"id":"y4HuvmEUODzZ"},"source":["We convert our data into a torch `Dataset`.\n","All datasets that represent a map from keys to data samples should subclass\n","`Dataset`. All subclasses should overwrite `__getitem__`, supporting fetching a data sample for a given key:"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"5c38ed84-d4a2-4045-99b6-3165e4b7ea76"},"outputs":[],"source":["class AntivenomChallengeDataSet(Dataset):\n","    def __init__(\n","        self,\n","        amino_acid_map,\n","        antivenom_map,\n","        genus_map,\n","        species_map,\n","        proteinfam_map,\n","        data,\n","        is_train,\n","        label_name=None,\n","      ):\n","        self.amino_acid_map = amino_acid_map\n","        self.antivenom_map = antivenom_map\n","        self.genus_map = genus_map\n","        self.species_map = species_map\n","        self.proteinfam_map = proteinfam_map\n","        self.data = data\n","        self.is_train = is_train\n","        self.label_name = label_name\n","\n","    def __len__(self):\n","        return len(self.data) \n","\n","    def __getitem__(self,idx):\n","        row = self.data.iloc[idx]\n","        kmer_seq = torch.as_tensor([self.amino_acid_map[e] for e in list(row[\"Toxin_Kmer\"])])\n","        kmer_seq_sparsed = torch.as_tensor(list(row[names].values))\n","        antivenom = torch.as_tensor(self.antivenom_map[row[\"Antivenom\"]])\n","        genus = torch.as_tensor(self.genus_map[row[\"Genus\"]])\n","        species = torch.as_tensor(self.species_map[row[\"Species\"]])\n","        proteinfam = torch.as_tensor(self.proteinfam_map[row[\"ProteinFam\"]])\n","        position_start = torch.as_tensor(row[\"Kmer_Position_start\"])\n","        position_end = torch.as_tensor(row[\"Kmer_Position_end\"])\n","        statistics = torch.as_tensor(list(row[additional_cols].values))\n","        \n","        inputs = {\n","            \"K_mer\": kmer_seq,\n","            \"K_mer_sparsed\":kmer_seq_sparsed,\n","            \"antivenom\": antivenom,\n","            \"genus\": genus,\n","            \"species\": species,\n","            \"proteinfam\": proteinfam,\n","            \"position_start\": position_start,\n","            \"position_end\": position_end,\n","            \"statistics\": statistics\n","        }\n","\n","        if self.is_train: \n","            return inputs, torch.as_tensor([row[self.label_name]])\n","        return inputs"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"04ee359a-ab9f-422e-ae71-50685acd0c44"},"outputs":[],"source":["train_dataset = AntivenomChallengeDataSet(\n","    amino_acid_map=amino_acid_map,\n","    antivenom_map=antivenom_map,\n","    genus_map=genus_map,\n","    species_map=species_map,\n","    proteinfam_map=proteinfam_map,\n","    data=train_split_df,\n","    is_train=True,\n","    label_name=\"Signal\",\n",")\n","\n","val_dataset = AntivenomChallengeDataSet(\n","    amino_acid_map=amino_acid_map,\n","    antivenom_map=antivenom_map,\n","    genus_map=genus_map,\n","    species_map=species_map,\n","    proteinfam_map=proteinfam_map,\n","    data=val_split_df,\n","    is_train=True,\n","    label_name=\"Signal\",\n",")\n","\n","test_dataset = AntivenomChallengeDataSet(\n","    amino_acid_map=amino_acid_map,\n","    antivenom_map=antivenom_map,\n","    genus_map=genus_map,\n","    species_map=species_map,\n","    proteinfam_map=proteinfam_map,\n","    data=test_df,\n","    is_train=False,\n",")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cphwa_KMO6Um"},"outputs":[],"source":["train_dataset[0]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"3cc84cdb-dfc7-4910-a83f-2d1a52ddd5e4"},"outputs":[],"source":["batch_size = 64\n","num_workers = 4\n","shuffle = True\n","drop_last = False"]},{"cell_type":"markdown","metadata":{"id":"sQ15jMHhO3zh"},"source":["Now we create our PyTorch data loaders. These combine a dataset and a sampler, and provide an iterable over the given dataset."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"c0e3ab3d-540b-4a84-ac68-61376aefb299"},"outputs":[{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:490: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  cpuset_checked))\n"]}],"source":["train_data_loader = DataLoader(\n","    dataset=train_dataset,\n","    batch_size=batch_size,\n","    shuffle=shuffle,\n","    num_workers=num_workers,\n","    drop_last=drop_last,\n",")\n","\n","val_data_loader = DataLoader(\n","    dataset=val_dataset,\n","    batch_size=batch_size,\n","    shuffle=False,\n","    num_workers=num_workers,\n","    drop_last=False,  # we do not want to drop the last batch during evaluation\n",")\n","\n","test_data_loader= DataLoader(\n","    dataset=test_dataset,\n","    batch_size=batch_size,\n","    shuffle=False,\n","    num_workers=num_workers,\n","    drop_last=False,\n",")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"4178cdf5-9440-4c1c-a012-9701a6363d35"},"outputs":[{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:490: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  cpuset_checked))\n"]},{"name":"stdout","output_type":"stream","text":["K_mer shape: torch.Size([64, 16])\n","K_mer sparsed shape: torch.Size([64, 320])\n","antivenom shape: torch.Size([64])\n","genus shape: torch.Size([64])\n","species shape: torch.Size([64])\n","proteinfam shape: torch.Size([64])\n","statistics shape: torch.Size([64, 15])\n","target shape: torch.Size([64, 1])\n"]}],"source":["x, y = iter(train_data_loader).next()\n","\n","print(f\"K_mer shape: {x['K_mer'].shape}\")\n","print(f\"K_mer sparsed shape: {x['K_mer_sparsed'].shape}\")\n","print(f\"antivenom shape: {x['antivenom'].shape}\")\n","print(f\"genus shape: {x['genus'].shape}\")\n","print(f\"species shape: {x['species'].shape}\")\n","print(f\"proteinfam shape: {x['proteinfam'].shape}\")\n","print(f\"statistics shape: {x['statistics'].shape}\")\n","print(f\"target shape: {y.shape}\")"]},{"cell_type":"markdown","metadata":{"id":"4lXf0OdpP_zh"},"source":["## Define the model\n","For this example we will build an LSTM architeture. It is your task to come up with more performant architectures to improve the scores."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"d828aecc-9bb9-498e-89dd-25fb43482829"},"outputs":[],"source":["class SimpleSeqModel(nn.Module):\n","    def __init__(\n","        self,\n","        K_mer_emb_size,\n","        K_mer_nunique,\n","        K_mer_sparsed_emb_size,\n","        K_mer_sparsed_nunique,\n","        antivenom_emb_size,\n","        antivenom_unique,\n","        genus_emb_size,\n","        genus_unique,\n","        species_emb_size,\n","        species_unique,\n","        proteinfam_emb_size,\n","        proteinfam_unique,\n","        statistics_emb_size,\n","        statistics_unique,\n","        max_Position_start,\n","        Position_start_emb_size,\n","    ): \n","        super().__init__()\n","        self.K_mer_emb_size = K_mer_emb_size        \n","        self.K_mer_nunique = K_mer_nunique \n","        self.K_mer_sparsed_emb_size = K_mer_sparsed_emb_size        \n","        self.K_mer_sparsed_nunique = K_mer_sparsed_nunique                \n","        self.antivenom_emb_size = antivenom_emb_size  \n","        self.antivenom_unique = antivenom_unique                  \n","        self.genus_emb_size = genus_emb_size  \n","        self.genus_unique = genus_unique                  \n","        self.species_emb_size = species_emb_size  \n","        self.species_unique = species_unique                  \n","        self.proteinfam_emb_size = proteinfam_emb_size  \n","        self.proteinfam_unique = proteinfam_unique                     \n","        self.statistics_emb_size = statistics_emb_size  \n","        self.statistics_unique = statistics_unique     \n","        \n","        \n","        self.Kmer_emb_layer = nn.Embedding(\n","            num_embeddings=self.K_mer_nunique,\n","            embedding_dim=self.K_mer_emb_size,\n","        )\n","        self.Kmer_sparsed_emb_layer = nn.Embedding(\n","            num_embeddings=self.K_mer_sparsed_nunique,\n","            embedding_dim=self.K_mer_sparsed_emb_size,\n","        )\n","        self.Antivenom_emb = nn.Embedding(\n","            num_embeddings=self.antivenom_unique,\n","            embedding_dim=self.antivenom_emb_size,\n","        )\n","\n","        self.Genus_emb = nn.Embedding(\n","            num_embeddings=self.genus_unique,\n","            embedding_dim=self.genus_emb_size,\n","        )\n","        self.Species_emb = nn.Embedding(\n","            num_embeddings=self.species_unique,\n","            embedding_dim=self.species_emb_size,\n","        )\n","        self.ProteinFam_emb = nn.Embedding(\n","            num_embeddings=self.proteinfam_unique,\n","            embedding_dim=self.proteinfam_emb_size,\n","        )\n","        \n","        self.Statistics_emb = nn.Embedding(\n","            num_embeddings=self.statistics_unique,\n","            embedding_dim=self.statistics_emb_size,\n","        )\n","\n","    \n","        self.Position_start_emb = nn.Embedding(\n","            num_embeddings=max_Position_start,\n","            embedding_dim=Position_start_emb_size,\n","        )\n","        self.Features = nn.Linear(\n","            in_features=self.antivenom_emb_size + self.genus_emb_size + self.species_emb_size + \n","            self.proteinfam_emb_size + Position_start_emb_size,\n","            out_features=128,\n","        )\n","        \n","        self.Lstm_layer_1 = nn.LSTM(\n","            input_size=self.K_mer_emb_size,\n","            hidden_size=256,\n","            num_layers=1,\n","            bidirectional=True,\n","            batch_first=True,\n","        )\n","        self.Lstm_layer_2 = nn.LSTM(\n","            input_size=512,\n","            hidden_size=256,\n","            num_layers=1,\n","            bidirectional=False,\n","            batch_first=True,\n","        )\n","        \n","        self.Lstm_layer_11 = nn.LSTM(\n","            input_size=self.statistics_emb_size,\n","            hidden_size=256,\n","            num_layers=1,\n","            bidirectional=True,\n","            batch_first=True,\n","        )\n","        \n","        self.Lstm_layer_21 = nn.LSTM(\n","            input_size=512,\n","            hidden_size=256,\n","            num_layers=1,\n","            bidirectional=False,\n","            batch_first=True,\n","        )\n","\n","        self.Lstm_layer_12 = nn.LSTM(\n","            input_size=self.K_mer_emb_size,\n","            hidden_size=256,\n","            num_layers=1,\n","            bidirectional=True,\n","            batch_first=True,\n","        )\n","        \n","        self.Lstm_layer_22 = nn.LSTM(\n","            input_size=512,\n","            hidden_size=256,\n","            num_layers=1,\n","            bidirectional=False,\n","            batch_first=True,\n","        )\n","        \n","        self.Linear_1 = nn.Linear(\n","            in_features=self.Lstm_layer_2.hidden_size + self.Lstm_layer_21.hidden_size + self.Lstm_layer_22.hidden_size + self.Features.out_features,\n","            out_features=512,\n","        )\n","        \n","        self.relu_1 = nn.ReLU()\n","        self.Linear_2 = nn.Linear(\n","            in_features=self.Linear_1.out_features, out_features=256,\n","        )\n","        self.relu_2 = nn.ReLU()\n","        self.Output = nn.Linear(\n","            in_features=self.Linear_2.out_features, out_features=1,\n","        )\n","        \n","    def forward(self, inputs):\n","        kmer_emb = self.Kmer_emb_layer(inputs[\"K_mer\"])\n","        kmer_sparsed_emb = self.Kmer_emb_layer(inputs[\"K_mer_sparsed\"])\n","        antivenom_emb = self.Antivenom_emb(inputs[\"antivenom\"])\n","        genus_emb = self.Genus_emb(inputs[\"genus\"])\n","        species_emb = self.Species_emb(inputs[\"species\"])\n","        proteinfam_emb = self.ProteinFam_emb(inputs[\"proteinfam\"])\n","        statistics_emb = self.Statistics_emb(inputs[\"statistics\"])\n","        position_start_emb = self.Position_start_emb(inputs[\"position_start\"])\n","\n","        emb_features = torch.cat((antivenom_emb, genus_emb, species_emb, proteinfam_emb, position_start_emb), axis=1)\n","        features = self.Features(emb_features)\n","        \n","        lstm_1_seq, (lstm_1_h, lstm1_c) = self.Lstm_layer_1(kmer_emb)\n","        lstm_2_seq, (lstm_2_h, lstm2_c) = self.Lstm_layer_2(lstm_1_seq)\n","        \n","        lstm_11_seq, (lstm_11_h, lstm11_c) = self.Lstm_layer_11(statistics_emb)\n","        lstm_21_seq, (lstm_21_h, lstm21_c) = self.Lstm_layer_21(lstm_11_seq)\n","        \n","        lstm_12_seq, (lstm_12_h, lstm12_c) = self.Lstm_layer_12(kmer_sparsed_emb)\n","        lstm_22_seq, (lstm_22_h, lstm22_c) = self.Lstm_layer_22(lstm_12_seq)\n","\n","        lstm_h = torch.squeeze(lstm_2_h)\n","        lstm_h2 = torch.squeeze(lstm_21_h)\n","        lstm_h3 = torch.squeeze(lstm_22_h)\n","        emb = torch.cat((lstm_h, lstm_h2, lstm_h3, features), axis=1)\n","        linear_1 = self.relu_1(self.Linear_1(emb))\n","        linear_2 = self.relu_2(self.Linear_2(linear_1))\n","        output = self.Output(linear_2)\n","        return output\n","        \n","        "]},{"cell_type":"markdown","metadata":{"id":"5Nu4DXk-9jyf"},"source":["Now that the model architecture is defined we are goint to instantiate our model. For this we need to calculate `max_Position_start` in order to calculate the size of the embedding layer we will use to encode the start position. The maximum position that the train and test dataset can have is:\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"pakRsAlg837A"},"outputs":[{"name":"stdout","output_type":"stream","text":["Max Position_start : 596\n"]}],"source":["max_Position_start = pd.concat([train_df[[\"Kmer_Position_start\"]], test_df[[\"Kmer_Position_start\"]]]).Kmer_Position_start.max()+1\n","\n","print(f\"Max Position_start : {max_Position_start}\")\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"82d277f2-aa03-4527-a6a7-044a8c90fe66"},"outputs":[{"ename":"TypeError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m\u003cipython-input-46-4c3c077640cf\u003e\u001b[0m in \u001b[0;36m\u003cmodule\u003e\u001b[0;34m()\u001b[0m\n\u001b[1;32m     17\u001b[0m     \u001b[0mstatistics_unique\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m15\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m     \u001b[0mmax_Position_start\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmax_Position_start\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---\u003e 19\u001b[0;31m     \u001b[0mPosition_start_emb_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m64\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     20\u001b[0m )\n\u001b[1;32m     21\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: __init__() missing 1 required positional argument: 'K_mer_sparsed_nunique'"]}],"source":["num_epochs = 10\n","early_stopping = 5\n","\n","model = SimpleSeqModel(\n","    K_mer_emb_size=512,\n","    K_mer_sparsed_emb_size=512,\n","    K_mer_nunique=len(amino_acid_map),\n","    antivenom_emb_size=64,\n","    antivenom_unique=len(antivenom_map),\n","    genus_emb_size=64,\n","    genus_unique=len(genus_map),\n","    species_emb_size=64,\n","    species_unique=len(species_map),\n","    proteinfam_emb_size=64,\n","    proteinfam_unique=len(proteinfam_map),    \n","    statistics_emb_size=512,\n","    statistics_unique=15,\n","    max_Position_start=max_Position_start,\n","    Position_start_emb_size=64,\n",")\n","\n","loss_fn = nn.MSELoss()\n","\n","model = model.to(device)\n","\n","optimizer = torch.optim.Adam(model.parameters(), lr=1e-4)\n","\n","writer = SummaryWriter()\n","writer.add_graph(model, {k: v.to(device) for k, v in next(iter(train_data_loader))[0].items()})"]},{"cell_type":"markdown","metadata":{"id":"Wy_0FRUbJt_W"},"source":["### Training the model\n","We define a simple training loop\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"b808e6b1-52bd-4685-a31a-fa665494613d"},"outputs":[],"source":["def train_func(\n","    train_data_loader,\n","    val_data_loader,\n","    model,\n","    loss_fn,\n","    optimizer,\n","    num_epochs,\n","    device,\n","    early_stopping=5,\n","): \n","    total_batches = len(train_data_loader)\n","    total_batches_val = len(val_data_loader)\n","    train_loss = []\n","    \n","    n_iter = 0\n","    for epoch in range(num_epochs): \n","        tqdm_bar = tqdm(train_data_loader, desc=f\"epoch {epoch}\", position=0) \n","        old_val_loss = np.inf\n","        wating = 0\n","        model.train()\n","        for batch_number, (X, y) in enumerate(tqdm_bar):\n","            y = y.type(torch.FloatTensor).to(device)\n","            X = {k: X[k].to(device) for k in X}\n","            \n","            optimizer.zero_grad()\n","            pred = model(X)\n","            loss = loss_fn(pred, y)\n","            loss.backward()\n","            \n","            torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)\n","            optimizer.step()\n","            \n","            loss = loss.item()\n","            train_loss.append(loss)\n","\n","            writer.add_scalar(\"loss/train\", loss, n_iter)\n","            n_iter += 1\n","\n","            if batch_number % 25 == 0: \n","                tqdm_bar.set_postfix(\n","                    {\n","                        \"train\": f\"{batch_number}/{total_batches} loss: {loss:.3} epoch loss: {np.mean(train_loss):.3}\",\n","                    },\n","                )\n","\n","        val_tqdm_bar = tqdm(\n","            val_data_loader, desc=f\"epoch {epoch}\", position=0, leave=True,\n","        ) \n","        val_loss = []\n","        model.eval()\n","        with torch.no_grad(): \n","            for batch_number, (X, y) in enumerate(val_tqdm_bar):\n","                y = y.type(torch.FloatTensor).to(device)\n","                X = {k: X[k].to(device) for k in X}\n","                \n","                pred = model(X)\n","                val_loss.append(loss_fn(pred, y).item())\n","\n","                writer.add_scalar(\"loss/validation\", np.random.random(), n_iter)\n","\n","                if batch_number % 25 == 0: \n","                    val_tqdm_bar.set_postfix(\n","                        {\n","                            \"valid\": f\"{batch_number}/{total_batches_val} val loss: {np.mean(val_loss):.3}\"\n","                        },\n","                    )\n","        \n","        new_val_loss = np.mean(val_loss)\n","\n","        if new_val_loss \u003e old_val_loss:\n","            wating += wating\n","        else:\n","            old_val_loss = new_val_loss\n","\n","        if wating \u003e early_stopping:\n","            break"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MZ707drSVK0H"},"outputs":[],"source":["%tensorboard --logdir runs"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"18984ce6-5cc7-403a-a223-1fadb7466706"},"outputs":[],"source":["train_func(\n","    train_data_loader=train_data_loader,\n","    val_data_loader=val_data_loader,\n","    model=model,\n","    loss_fn=loss_fn,\n","    optimizer=optimizer,\n","    num_epochs=num_epochs,\n","    device=device,\n","    early_stopping=early_stopping,\n",")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"e8d635a3-fa34-4b16-9a76-42dfb736455c"},"outputs":[],"source":["torch.save(model, \"model.pth\")"]},{"cell_type":"markdown","metadata":{"id":"07JhrgWQJjl3"},"source":["### Sample baseline Submission\n","Finally we will prepare a baseline submission to Zindi \n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"NzqYHYOXGh1c"},"outputs":[],"source":["def predict_test(data_loader, path): \n","    model = torch.load(path).to(device)\n","    tqdm_bar = tqdm(data_loader, desc=\"Inference\", position=0, leave=True) \n","    total_batches = len(tqdm_bar)\n","\n","    preds = []\n","    with torch.no_grad():\n","        for batch_number, X in enumerate(tqdm_bar):\n","            X= {k: X[k].to(device) for k in X}\n","            pred = model(X)\n","            preds.append(pred.cpu().numpy())\n","\n","        preds = np.concatenate(preds)\n","        return preds"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"l25s3xDrJc8U"},"outputs":[],"source":["test_pred = predict_test(test_data_loader,\"model.pth\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vWXzy2hZGiZq"},"outputs":[],"source":["sample_submission=test_df[[\"ID\"]]\n","sample_submission[\"Signal\"] = test_pred.reshape((-1))\n","sample_submission.to_csv(\"Submissions/sample_submission_lb_ug_more_features+stats+KMER_SEQ.csv\",index=False)"]},{"cell_type":"markdown","metadata":{"id":"BrBsX3OnGRVs"},"source":["That is it! Now we can upload the sample_submission.csv to Zindi! As a final thing lets look at it. "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OVLFyzQK68uh"},"outputs":[],"source":["sample_submission.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"34eEOKd0Gm50"},"outputs":[],"source":["sample_submission[\"Signal\"].hist()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"WluOrYzKItCx"},"outputs":[],"source":["sample_submission[\"Signal\"].describe()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1zBRe78xkMoL"},"outputs":[],"source":[""]}],"metadata":{"accelerator":"GPU","colab":{"authorship_tag":"ABX9TyN6HeKA7vwUtxlUKNVD/HX/","collapsed_sections":[],"mount_file_id":"1gsGNSCwYEmxaNtL8pE3D7aklQ0e-_wnp","name":"ASAB-v8","version":""},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}